{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\incluit\\\\Desktop\\\\projects\\\\smartHuertaFE\\\\src\\\\components\\\\map\\\\MapView.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { LayersControl, Map, TileLayer } from \"react-leaflet\";\nimport Markers from \"./VenueMarkers\";\nimport \"leaflet/dist/leaflet.css\";\nimport { toast, Toaster } from \"react-hot-toast\";\nimport { UserIntroduction } from \"../user/UserIntroduction\";\nimport { validationHomesByUser } from \"./validation/validationHome\";\nimport \"esri-leaflet-geocoder/dist/esri-leaflet-geocoder.css\";\nimport { geosearch } from \"esri-leaflet-geocoder\";\n\nconst MapView = ({\n  registerHome,\n  setDataHome,\n  dataOfUser,\n  dataHome,\n  getHome,\n  changeUserNew\n}) => {\n  const [deleteHome, setDeleteHome] = useState(false);\n  const mapRef = useRef();\n  const control = geosearch();\n  useEffect(() => {\n    const {\n      current = {}\n    } = mapRef;\n    const {\n      leafletElement: map\n    } = current;\n    if (!map) return;\n    control.addTo(map);\n    control.on(\"results\", handleOnSearchResuts);\n    control.off(\"results\", handleOnSearchResuts);\n  }, []);\n\n  const handleOnSearchResuts = data => {\n    console.log(\"Searchlts\", data);\n  };\n\n  const getAllHomes = async currentLocation => {\n    const {\n      data\n    } = await getHome();\n    setDataHome({ ...dataHome,\n      data: data\n    });\n\n    if (currentLocation) {\n      const {\n        lat,\n        lng\n      } = currentLocation;\n      setDataHome({ ...dataHome,\n        data: data,\n        currentLocation: {\n          lat: lat,\n          lng: lng\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (dataOfUser === null || dataOfUser === void 0 ? void 0 : dataOfUser.isNew) {\n      UserIntroduction(dataOfUser);\n    } else {\n      getAllHomes();\n    }\n  }, []);\n  useEffect(() => {\n    if (deleteHome) {\n      var _dataHome$data;\n\n      const homeOfUser = (_dataHome$data = dataHome.data) === null || _dataHome$data === void 0 ? void 0 : _dataHome$data.some(home => home.name === dataOfUser.name);\n\n      if (!homeOfUser) {\n        changeUserNew(true);\n        window.location.reload(true);\n      }\n\n      setDeleteHome(false);\n    }\n  }, [deleteHome]);\n\n  const registerNewHome = async e => {\n    const {\n      lat,\n      lng\n    } = e.latlng;\n    const newVenue = {\n      name: dataOfUser.name,\n      latitude: lat,\n      longitude: lng,\n      isSpecial: false\n    };\n    const validationHome = validationHomesByUser(dataHome, newVenue);\n\n    if (validationHome.length > 1) {\n      return toast.error(\"El usuario puede tener solo 2 casas\");\n    }\n\n    const registerHomeUser = await registerHome(newVenue);\n\n    if (!registerHomeUser.ok) {\n      return;\n    }\n\n    changeUserNew(false);\n    toast.dismiss();\n    await getAllHomes(e.latlng);\n  };\n\n  const {\n    BaseLayer\n  } = LayersControl;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Toaster, {\n    position: \"top-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Map, {\n    center: dataHome === null || dataHome === void 0 ? void 0 : dataHome.currentLocation,\n    style: {\n      width: \"100%\"\n    },\n    zoom: dataHome === null || dataHome === void 0 ? void 0 : dataHome.zoom,\n    ondblclick: registerNewHome,\n    ref: mapRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Markers, {\n    getAllHomes: getAllHomes,\n    dataHome: dataHome,\n    setDeleteHome: setDeleteHome,\n    style: {\n      backgroundColor: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LayersControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BaseLayer, {\n    checked: true,\n    name: \"OpenStreetMap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(BaseLayer, {\n    name: \"NASA Gibs Blue Marble\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'\",\n    attribution: \"Tiles \\xA9 Esri \\u2014 Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default MapView;","map":{"version":3,"sources":["C:/Users/incluit/Desktop/projects/smartHuertaFE/src/components/map/MapView.js"],"names":["React","useState","useEffect","useRef","LayersControl","Map","TileLayer","Markers","toast","Toaster","UserIntroduction","validationHomesByUser","geosearch","MapView","registerHome","setDataHome","dataOfUser","dataHome","getHome","changeUserNew","deleteHome","setDeleteHome","mapRef","control","current","leafletElement","map","addTo","on","handleOnSearchResuts","off","data","console","log","getAllHomes","currentLocation","lat","lng","isNew","homeOfUser","some","home","name","window","location","reload","registerNewHome","e","latlng","newVenue","latitude","longitude","isSpecial","validationHome","length","error","registerHomeUser","ok","dismiss","BaseLayer","width","zoom","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { LayersControl, Map, TileLayer } from \"react-leaflet\";\r\nimport Markers from \"./VenueMarkers\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { toast, Toaster } from \"react-hot-toast\";\r\nimport { UserIntroduction } from \"../user/UserIntroduction\";\r\nimport { validationHomesByUser } from \"./validation/validationHome\";\r\nimport \"esri-leaflet-geocoder/dist/esri-leaflet-geocoder.css\";\r\nimport { geosearch } from \"esri-leaflet-geocoder\";\r\n\r\nconst MapView = ({\r\n  registerHome,\r\n  setDataHome,\r\n  dataOfUser,\r\n  dataHome,\r\n  getHome,\r\n  changeUserNew,\r\n}) => {\r\n  const [deleteHome, setDeleteHome] = useState(false);\r\n\r\n  const mapRef = useRef();\r\n\r\n  const control = geosearch();\r\n\r\n  useEffect(() => {\r\n    const { current = {} } = mapRef;\r\n    const { leafletElement: map } = current;\r\n\r\n    if (!map) return;\r\n\r\n    control.addTo(map);\r\n\r\n    control.on(\"results\", handleOnSearchResuts);\r\n\r\n\r\n    control.off(\"results\", handleOnSearchResuts);\r\n  }, []);\r\n\r\n\r\n  const handleOnSearchResuts = (data) => {\r\n    console.log(\"Searchlts\", data);\r\n  }\r\n\r\n  const getAllHomes = async (currentLocation) => {\r\n    const { data } = await getHome();\r\n\r\n    setDataHome({ ...dataHome, data: data });\r\n    if (currentLocation) {\r\n      const { lat, lng } = currentLocation;\r\n      setDataHome({\r\n        ...dataHome,\r\n        data: data,\r\n        currentLocation: { lat: lat, lng: lng },\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (dataOfUser?.isNew) {\r\n      UserIntroduction(dataOfUser);\r\n    } else {\r\n      getAllHomes();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (deleteHome) {\r\n      const homeOfUser = dataHome.data?.some(\r\n        (home) => home.name === dataOfUser.name\r\n      );\r\n\r\n      if (!homeOfUser) {\r\n        changeUserNew(true);\r\n        window.location.reload(true);\r\n      }\r\n      setDeleteHome(false);\r\n    }\r\n  }, [deleteHome]);\r\n\r\n  const registerNewHome = async (e) => {\r\n    const { lat, lng } = e.latlng;\r\n\r\n    const newVenue = {\r\n      name: dataOfUser.name,\r\n      latitude: lat,\r\n      longitude: lng,\r\n      isSpecial: false,\r\n    };\r\n\r\n    const validationHome = validationHomesByUser(dataHome, newVenue);\r\n\r\n    if (validationHome.length > 1) {\r\n      return toast.error(\"El usuario puede tener solo 2 casas\");\r\n    }\r\n\r\n    const registerHomeUser = await registerHome(newVenue);\r\n\r\n    if (!registerHomeUser.ok) {\r\n      return;\r\n    }\r\n\r\n    changeUserNew(false);\r\n    toast.dismiss();\r\n    await getAllHomes(e.latlng);\r\n  };\r\n\r\n  const { BaseLayer } = LayersControl;\r\n\r\n  return (\r\n    <>\r\n      <Toaster position=\"top-center\" />\r\n\r\n      <Map\r\n        center={dataHome?.currentLocation}\r\n        style={{ width: \"100%\" }}\r\n        zoom={dataHome?.zoom}\r\n        ondblclick={registerNewHome}\r\n        ref={mapRef}\r\n      >\r\n        <Markers\r\n          getAllHomes={getAllHomes}\r\n          dataHome={dataHome}\r\n          setDeleteHome={setDeleteHome}\r\n          style={{ backgroundColor: \"red\" }}\r\n        />\r\n\r\n        <LayersControl>\r\n          <BaseLayer checked name=\"OpenStreetMap\">\r\n            <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n          </BaseLayer>\r\n          <BaseLayer name=\"NASA Gibs Blue Marble\">\r\n            <TileLayer\r\n              url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'\"\r\n              attribution=\"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\"\r\n            />\r\n          </BaseLayer>\r\n        </LayersControl>\r\n      </Map>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MapView;\r\n"]},"metadata":{},"sourceType":"module"}